/*
 * Copyright (c) 2016-present, Oculus, LLC
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (c) 2016-present, Oculus, LLC
ll rights reserved.

his source code is licensed under the license found in the LICENSE file in
the root directory of this source tree.


/**
 * DeviceOrientationControls allows manipulation of the camera through a
 * mobile device's inner IMU.
 */

var _ThreeShim = require('../ThreeShim');

var _ThreeShim2 = _interopRequireDefault(_ThreeShim);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Unit vector on the Z-axis
var Z_UNIT = new _ThreeShim2.default.Vector3(0, 0, 1);
// -Pi/2 rotation around the X-axis
var SCREEN_ROTATION = new _ThreeShim2.default.Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));

// Return the current screen orientation (landscape, potrait, etc.)
function getScreenOrientation() {
  var orientation = screen.orientation || screen.mozOrientation || screen.msOrientation || {};
  var angle = orientation.angle || window.orientation || 0;
  return _ThreeShim2.default.Math.degToRad(angle);
}

var DeviceOrientationControls = function () {
  function DeviceOrientationControls(camera) {
    _classCallCheck(this, DeviceOrientationControls);

    this.camera = camera;
    this.enabled = true;

    // Screen orientation (potrait, landscape, etc.), in radians
    this.screenOrientation = getScreenOrientation();
    // Device orientation (alpha, beta, gamma axes), in radians
    this.deviceOrientation = {};

    // Ensure that event handlers are bound to this object
    this.orientationChangeHandler = this.orientationChangeHandler.bind(this);
    this.deviceOrientationHandler = this.deviceOrientationHandler.bind(this);

    this.connect();
  }

  _createClass(DeviceOrientationControls, [{
    key: 'connect',
    value: function connect() {
      this.screenOrientation = getScreenOrientation();
      window.addEventListener('orientationchange', this.orientationChangeHandler);
      window.addEventListener('deviceorientation', this.deviceOrientationHandler);
      this.enabled = true;
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      window.removeEventListener('orientationchange', this.orientationChangeHandler);
      window.removeEventListener('deviceorientation', this.deviceOrientationHandler);
      this.enabled = false;
    }
  }, {
    key: 'orientationChangeHandler',
    value: function orientationChangeHandler() {
      this.screenOrientation = getScreenOrientation();
    }
  }, {
    key: 'deviceOrientationHandler',
    value: function deviceOrientationHandler(event) {
      this.deviceOrientation.alpha = _ThreeShim2.default.Math.degToRad(event.alpha);
      this.deviceOrientation.beta = _ThreeShim2.default.Math.degToRad(event.beta);
      this.deviceOrientation.gamma = _ThreeShim2.default.Math.degToRad(event.gamma);
    }
  }, {
    key: 'resetRotation',
    value: function resetRotation(x, y, z) {
      // No-op for now, since it has no impact until these controls are rewritten
      // as an offset from the initial camera position
    }
  }, {
    key: 'update',
    value: function update() {
      if (!this.enabled) {
        return;
      }
      var alpha = this.deviceOrientation.alpha || 0;
      var beta = this.deviceOrientation.beta || 0;
      var gamma = this.deviceOrientation.gamma || 0;
      var orient = this.screenOrientation;

      // Update the camera rotation quaternion
      var quaternion = this.camera.quaternion;
      var euler = new _ThreeShim2.default.Euler(beta, alpha, -gamma, 'YXZ');
      quaternion.setFromEuler(euler);
      quaternion.multiply(SCREEN_ROTATION); // rotate from device top to a screen normal
      var orientationRotation = new _ThreeShim2.default.Quaternion();
      orientationRotation.setFromAxisAngle(Z_UNIT, -orient);
      quaternion.multiply(orientationRotation); // Account for system-level screen rotation
    }
  }], [{
    key: 'isSupported',
    value: function isSupported() {
      return 'DeviceMotionEvent' in window && /Mobi/i.test(navigator.userAgent);
    }
  }]);

  return DeviceOrientationControls;
}();

exports.default = DeviceOrientationControls;