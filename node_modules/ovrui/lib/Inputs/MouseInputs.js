/*
 * Copyright (c) 2016-present, Oculus, LLC
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (c) 2016-present, Oculus, LLC
ll rights reserved.

his source code is licensed under the license found in the LICENSE file in
the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

var _ThreeShim = require('../ThreeShim');

var _ThreeShim2 = _interopRequireDefault(_ThreeShim);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mouseEvents = ['mousedown', 'mouseup', 'click', 'dblclick', 'mousemove', 'mouseenter', 'mouseleave', 'mousewheel'];

/**
 * Basic wrapper of mouse events, which can dispatch MouseInputEvent
 */

var MouseInputs = function () {
  function MouseInputs() {
    _classCallCheck(this, MouseInputs);

    this.eventDispatcher = new _ThreeShim2.default.EventDispatcher();
    this.inputEventType = 'MouseInputEvent';
    this.currentTarget = null;
    this._onMouseEvent = this._onMouseEvent.bind(this);
  }

  _createClass(MouseInputs, [{
    key: 'generateInputEvent',
    value: function generateInputEvent(event) {
      // Only pass those needed properties in WebVR
      var viewport = event.currentTarget.getBoundingClientRect();
      var viewportX = (event.clientX - viewport.left) / viewport.width * 2 - 1;
      var viewportY = -((event.clientY - viewport.top) / viewport.height) * 2 + 1;
      return {
        type: this.inputEventType,
        mouseEventType: event.type,
        viewportX: viewportX,
        viewportY: viewportY,
        altKey: event.altKey,
        button: event.button,
        buttons: event.buttons,
        ctrlKey: event.ctrlKey,
        metaKey: event.metaKey,
        shiftKey: event.shiftKey
      };
    }
  }, {
    key: '_onMouseEvent',
    value: function _onMouseEvent(event) {
      // check and make sure event target is current target
      if (event.currentTarget && event.currentTarget === this.currentTarget) {
        this.eventDispatcher.dispatchEvent(this.generateInputEvent(event));
      }
    }
  }, {
    key: 'frame',
    value: function frame(targetElement) {
      // If current render target changed
      if (targetElement && this.currentTarget !== targetElement) {
        // Unregister previous event listeners
        if (this.currentTarget) {
          for (var i = 0; i < mouseEvents.length; i++) {
            this.currentTarget.removeEventListener(mouseEvents[i], this._onMouseEvent, true);
          }
        }
        this.currentTarget = targetElement;
        // Register event listeners
        if (this.currentTarget) {
          for (var _i = 0; _i < mouseEvents.length; _i++) {
            this.currentTarget.addEventListener(mouseEvents[_i], this._onMouseEvent, true);
          }
        }
      }
    }
  }]);

  return MouseInputs;
}();

exports.default = MouseInputs;