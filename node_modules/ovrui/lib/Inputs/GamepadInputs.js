/*
 * Copyright (c) 2016-present, Oculus, LLC
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (c) 2016-present, Oculus, LLC
ll rights reserved.

his source code is licensed under the license found in the LICENSE file in
the root directory of this source tree.


var _ThreeShim = require('../ThreeShim');

var _ThreeShim2 = _interopRequireDefault(_ThreeShim);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var KeyEventType = {
  KEY_EVENT_DOWN: 'keydown',
  KEY_EVENT_UP: 'keyup'
};

var LONG_PRESS_TIME = 500; // The same as keyboard event in HTML5

/**
 * Basic wrapper of WebVR gamepad interface, which can dispatch GamepadInputEvents
 */

var GamepadInputs = function () {
  function GamepadInputs() {
    _classCallCheck(this, GamepadInputs);

    this.gamepads = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads : [];
    this.eventDispatcher = new _ThreeShim2.default.EventDispatcher();
    this._gamepadStates = [];
    this.inputEventType = 'GamepadInputEvent';
  }

  _createClass(GamepadInputs, [{
    key: 'generateInputEvent',
    value: function generateInputEvent(keyEventType, gamepadId, buttonId, repeat) {
      return {
        type: this.inputEventType,
        gamepadId: gamepadId,
        mapping: this._gamepadStates[gamepadId].mapping,
        buttonId: buttonId,
        repeat: repeat,
        keyEventType: keyEventType
      };
    }
  }, {
    key: 'pollButtonState',
    value: function pollButtonState(nativeButtonState) {
      if ((typeof nativeButtonState === 'undefined' ? 'undefined' : _typeof(nativeButtonState)) === 'object') {
        return nativeButtonState.pressed;
      }
      return nativeButtonState === 1.0;
    }
  }, {
    key: 'updateButtonStates',
    value: function updateButtonStates(gamepadId, buttonId, nativeButtonState) {
      var currentTime = Date.now();
      if (this._gamepadStates[gamepadId].buttonStates[buttonId] === undefined) {
        this._gamepadStates[gamepadId].buttonStates[buttonId] = {
          buttonHeld: false,
          startTime: currentTime
        };
      }

      var buttonHeld = this.pollButtonState(nativeButtonState);
      var buttonState = this._gamepadStates[gamepadId].buttonStates[buttonId];

      if (buttonState.buttonHeld !== buttonHeld) {
        // Fire event for button state changes
        if (buttonHeld) {
          this.eventDispatcher.dispatchEvent(this.generateInputEvent(KeyEventType.KEY_EVENT_DOWN, gamepadId, buttonId, false));
        } else {
          this.eventDispatcher.dispatchEvent(this.generateInputEvent(KeyEventType.KEY_EVENT_UP, gamepadId, buttonId, false));
        }

        // Update button state
        buttonState.buttonHeld = buttonHeld;
        buttonState.startTime = currentTime;
      }

      // When button press time exceeds long press time, fire repeat key down event
      if (buttonHeld && currentTime - buttonState.startTime > LONG_PRESS_TIME) {
        this.eventDispatcher.dispatchEvent(this.generateInputEvent(KeyEventType.KEY_EVENT_DOWN, gamepadId, buttonId, true));
      }
    }
  }, {
    key: 'frame',
    value: function frame() {
      // use empty array if the gamepads api doesn't exist eg iOS
      this.gamepads = navigator.getGamepads ? navigator.getGamepads() : [];
      for (var i = 0; i < this.gamepads.length; ++i) {
        var gamepad = this.gamepads[i];
        if (gamepad) {
          if (this._gamepadStates[i] === undefined) {
            this._gamepadStates[i] = {
              mapping: gamepad.mapping,
              buttonStates: []
            };
          }
          for (var j = 0; j < gamepad.buttons.length; ++j) {
            this.updateButtonStates(i, j, gamepad.buttons[j]);
          }
        }
      }
    }
  }]);

  return GamepadInputs;
}();

exports.default = GamepadInputs;