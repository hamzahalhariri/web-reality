/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

 /**
 * Networking is an implementation of the networking interface used by React native.
 * These methods are not intended to be called directly. Rather, they are
 * called remotely by the Networking module on the React side.
 * The Networking module is used by React's implementation of fetch, etc
 * The functionality is built on fetch. The results of the actions and of the requests
 * are returned back to the react code via messages
 * @class Networking
 * @extends Module
 */

import Module from './Module';

/**
 * handleBase64
 * responseData for base64 encoding is receieved as a blob which needs to be converted
 * to base64 before sending over to React
 * @param requestId - ID used by React
 * @param responseData - Blob input returned by runtime fetch
 */
function handleBase64(requestId, responseData) {
  // use FileReader to convert blob to base64
  let reader = new FileReader();
  reader.onload = (event) => {
    // move on 8 characters if base64 string is found
    let index = event.target.result.indexOf(';base64,');
    index = (index >= 0) ? index + 8 : index;

    // finally send the string with request ID
    this._rnctx.callFunction(
      'RCTDeviceEventEmitter',
      'emit',
      ['didReceiveNetworkData', [requestId, event.target.result.slice(index)]]
    );
    // notifiy the end of the data by sending response with null
    this._rnctx.callFunction(
      'RCTDeviceEventEmitter',
      'emit',
      ['didCompleteNetworkResponse', [requestId, null]]
    );
  };
  reader.readAsDataURL(responseData);
}

/**
 * handleText
 * responseData for test encoding is receieved as a string and can be
 * directly sent to React
 * @param requestId - ID used by React
 * @param responseData - string input returned by runtime fetch
 */
function handleText(requestId, responseData) {
  // send the string with request ID
  this._rnctx.callFunction(
    'RCTDeviceEventEmitter',
    'emit',
    ['didReceiveNetworkData', [requestId, responseData]]
  );
    // notifiy the end of the data by sending response with null
  this._rnctx.callFunction(
    'RCTDeviceEventEmitter',
    'emit',
    ['didCompleteNetworkResponse', [requestId, null]]
  );
}

export default class Networking extends Module {
  /**
   * Constructs a Networking with a specific React Native Context
   */
  constructor(rnctx) {
    super('Networking');
    this._rnctx = rnctx;
  }

  /**
   * Makes a request, and associates it with a specific requestId.
   * @param method - request method, 'GET', 'POST', 'DELETE'
   * @param url - url to make request to
   * @param headers - request headers
   * @param data - POST data to be sent alongside fetch
   * @param responseType - 'base64' or 'text'
   * @param useIncrementalUpdates - currently unused
   * @param timeout - currently unused
   */
  sendRequest(method, url, requestId, headers, data, responseType, useIncrementalUpdates, timeout) {
    method = method.toUpperCase();
    let options = {
      method: method,
      headers: headers
    };

    // copy over the body data for POST in the correct form
    if (method === 'POST' && data) {
      if (data.string) {
        options.body = data.string;
      } else if (data.formData) {
        let form = new FormData();
        for (let i = 0; i < data.formData.length; i++) {
          form.append(data.formData[i].fieldName, data.formData[i].string);
        }
        options.body = form;
      } else if (data.string) {
        options.body = data.string;
      }
    }

    // Make the request and send the appropriate event information to react
    // converting the data as required by `resposeType`
    const request = new Request(url, options);
    fetch(request, options).then((response) => {

      // first event is the response information which include the status
      // this must happen firtst
      this._rnctx.callFunction(
        'RCTDeviceEventEmitter',
        'emit',
        ['didReceiveNetworkResponse', [requestId, response.status, []]]
      );
      return responseType === 'text' ?
        response.text() :
        response.blob();
    }).then(responseType === 'text' ?
      handleText.bind(this, requestId) :
      handleBase64.bind(this, requestId)
    ).catch(function(res) {
      console.error(res);
    });
  }
}
