/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
 * Module to handle reporting of exceptions so that they are displayed in a useful manner
 * The stack is reordered so that the bottom of the console contains the top of the stack and therefore minimizes
 * scrolling
 * @class RCTExceptionsManager
 * @extends Module
 */

import Module from './Module';

export default class RCTExceptionsManager extends Module {
  constructor() {
    super('RCTExceptionsManager');
    this.hadFatal = undefined;
  }

	displayStackAndMessage(stack, message) {
		var output = '\n';
		if (message.indexOf('has not been registered') === -1 ||
			message.indexOf('AppRegistry.registerComponent') === -1) {
			output += '-----\n';
			for (let i=0; i<stack.length; i++) {
				const file = stack[i].file || '[unknown]';
				const methodName = stack[i].methodName || '[unknown]';
				const lineNumber = stack[i].lineNumber || 0;
				const column = stack[i].column || 0;
				output += ('> ' + methodName + '@' + file + ' ' + lineNumber + ':' + column + '\n');
			}
			output += '-----\n';
		}
		output += message || '';
		console.error(output);
	}

	reportSoftException(message, stack, exceptionId) {
		// only report a single fatal
		if (this.hadFatal) {
			return;
		}
		var reverseStack = stack.slice();
		reverseStack.reverse();
		this.displayStackAndMessage(reverseStack, message);
	}

	reportFatalException(message, stack, exceptionId) {
		// only report a single fatal
		if (this.hadFatal) {
			return;
		}
		var reverseStack = stack.slice();
		reverseStack.reverse();
		this.displayStackAndMessage(reverseStack, message);
		this.hadFatal = exceptionId;
	}

	updateExceptionMessage(message, stack, exceptionId) {
		// if we have had a fatal exception only update that exception
		if (this.hadFatal && this.hadFatal != exceptionId) {
			return;
		}
		var reverseStack = stack.slice();
		reverseStack.reverse();
		// attempt to prepend to file:/// so that we can directly click to the problem file within browser
		for (let i=0; i<reverseStack.length; i++) {
			if (reverseStack[i].file.indexOf(':') <= 2) {
				reverseStack[i].file = 'file:///' + reverseStack[i].file;
			}
		}
		this.displayStackAndMessage(reverseStack, message);
	}

	reportUnhandledException(message, stack) {
		// only report a single fatal
		if (this.hadFatal) {
			return;
		}
		var reverseStack = stack.slice();
		reverseStack.reverse();
		this.displayStackAndMessage(reverseStack, message);
	}
}
